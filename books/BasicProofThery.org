

#+TITLE: Basic Proof Theory
#+AUTHOR: A. S. Troelstra and H. Schwichtenberg

#+LATEX_HEADER: \input{preamble.tex}
#+EXPORT_FILE_NAME: ../latex/BasicProofTheory/BasicProofTheory.tex

* Introduction
** Simple type theories
   #+attr_latex: :options [the set of simple types]
   #+begin_definition
   the set of \tf{simple types} $\calt_\to$ is constructed from a countable set
   of \tf{type variables} $P_0,P_1,\dots$ by means of a type-forming operation
   (\tf{function-type constructor}) $\to$
   1. type variables belong to $\calt_\to$
   2. if $A,B\in\calt_\to$, then $(A\to B)\in\calt_\rightarrow$

      
   A type of the form $A\to B$ is called a \tf{function type}
   #+END_definition

   #+ATTR_LATEX: :options [Terms of the simply typed lambda calculus $\lambda_\to$]
   #+BEGIN_definition
   All terms appear with a type; for terms of type $A$ we use $t^A,s^A,r^A$. The
   terms are generated by the following three clauses
   1. For each $A\in T_\to$ there is a countably infinite supply of variables of
      type $A$; for arbitrary variables of type $A$ we use
      $u^A,v^A,w^A,x^A,y^A,z^A$
   2. if $t^{A\to B},s^A$ are terms, then $\app(t^{A\to B},s^A)^B$ is a term of
      type $B$
   3. if $t^B$ is a term of type $B$ and $x^A$ a variable of type $A$, then
      $(\lambda x^A.t^B)^{A\to B}$
   #+END_definition
   For $\app(t^{A\to B},s^A)^B$ we usually write simply $(t^{A\to B}s^A)^B$
   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   The set $\fv(t)$ of variables free in $t$ is specified by
   \begin{alignat*}{2}
   &\fv(x^A)&&:=x^A\\
   &\fv(ts)&&:=\fv(t)\cup\fv(s)\\
   &\fv(\lambda x.t)&&:=\fv(t)\backslash\{x\}
   \end{alignat*}
   #+END_definition


   #+ATTR_LATEX: :options [Substitution]
   #+BEGIN_definition
   The operation of substitution of a term $s$ for a variable $x$ in a term $t$
   (notation $t[x/s]$) may be defined by recursion on the complexity of $t$, as
   follows
   \begin{alignat*}{2}
   &x[x/s]&&:=s\\
   &y[x/s]&&:=y\text{ for } y\not\equiv x\\
   &(t_1t_2)[x/s]&&:=t_1[x/s]t_2[x/s]\\
   &(\lambda x.t)[x/s]&&:=\lambda x.t\\
   &(\lambda y.t)[x/s]&&=\lambda y.t[x/s]\text{ for } y\not\equiv x; \text{
   w.l.o.g. } y\not\in\fv(s)
   \end{alignat*}
   #+END_definition

   #+ATTR_LATEX: :options [Substitution lemma]
   #+BEGIN_lemma
   If $x\not\equiv y, x\not\in\fv(t_2)$, then
   \begin{equation*}
   t[x/t_1][y/t_2]\equiv t[y/t_2][x/t_1[y/t_2]]
   \end{equation*}
   #+END_lemma

   #+ATTR_LATEX: :options [Conversion, reduction, normal form]
   #+BEGIN_definition
   Let $\mathsf{T}$ be a set of terms, and let conv be a binary relation on
   $\mathsf{T}$, written in infix notation: $t$ conv $s$. If $t$ conv $s$, we
   say that $t$ \tf{converts to} $s$; $t$ is called a \tf{redex} or
   \tf{convertible} term and $s$ the \tf{conversum} of $t$. The replacement of a
   redex by its conversum is called a \tf{conversion}. We write $t\succ_1 s$
   ($t$ \tf{reduces in one step to } $s$) if $s$ is obtained from $t$ by
   replacement of a redex $t'$ of $t$ by a conversum $t''$ of $t'$. The relation
   $\succ$ (\tf{properly reduces to}) is the transitive closure of $\succ_1$ and
   $\succeq$ (\tf{reduces to}) is the reflexive and transitive closure of
   $\succ_1$. The relation $\succeq$ is said to be the notion of reduction
   \tf{generated} by cont.

   With the notion of reduction generated by cony we associate a relation on
   $\mathsf{T}$ called *conversion equality*: $t=_{\conv}s$ ($t$ is equal by
   conversion to $s$) if there 
   is a sequence $t_0,\dots,t_n$ with $t_0\equiv t,t_n\equiv s$, and $t_i\preceq
   t_{i+1}$ or $t_i\succeq t_{i+1}$ for each
   $i, 0\le i < n$. The subscript "conv" is usually omitted when clear from the
   context

   A term $t$ is in *normal form*, or $t$ is *normal*, if $t$ does not contain a redex. $t$
   *has a normal form* if there is a normal $s$ such that $t\succeq s$.

   A *reduction sequence* is a (finite or infinite) sequence of pairs
   $(t_0,\delta_0),(t_1,\delta_1),\dots$ 
   with $\delta_i$ an (occurrence of a) redex in $t_i$ and $t_i\succ t_{i+1}$ by
   conversion 
   of $\delta_i$, for all $i$. This may be written as
   \begin{equation*}
   t_0\overset{\delta_0}{\succ}_1 t_1\overset{\delta_1}{\succ}_1 t_2
   \overset{\delta_2}{\succ}_1\dots
   \end{equation*}
   We often omit the $\delta_i$, simply writing $t_0\succ_1 t_1\succ_1 t_2$

   Finite reduction sequences are partially ordered under the initial part
   relation ("sequence \sigma is an initial part of sequence \tau"); the collection of
   finite 
   reduction sequences starting from a term $g$ forms a tree, the *reduction tree*
   of $t$. The branches of this tree may be identified with the collection of all
   infinite and all terminating finite reduction sequences.


   A term is *strongly normalizing* (is SN) if its reduction tree is finite
   
   #+END_definition

   \beta-conversion:
   \begin{equation*}
   (\lambda x^A.t^B) s^A\e\cont_\beta\e t^B[x^A/s^A]
   \end{equation*}
   \eta-conversion:
   \begin{equation*}
   \lambda x^A.tx\e\cont_\eta\e  t\quad(x\not\in\fv(t))
   \end{equation*}
   \beta\eta-conversion $\cont_{\beta\eta}$ is $\cont_\beta\cup\cont_\eta$

   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   A relation $R$ is said to be *confluent*, or to have the *Church-Rosser property*
   (CR), if whenever $t_0 Rt_1$ and $t_0Rt_2$, then there is a $t_3$ s.t.
   $t_1Rt_3$ and $t_2Rt_3$. A relation $R$ is said to be *weakly confluent* or to
   have the *weak Church-Rosser property* if whenever $t_0Rt_1,t_0Rt_2$ there is a
   $t_3$ s.t. $t_1R^*t_3$ and $t_2R^* t_3$ where $R^*$ is the reflexive and
   transitive closure of $T$
   #+END_definition
   
   #+ATTR_LATEX: :options []
   #+BEGIN_theorem
   For a confluent reduction relation $\succeq$ the normal forms of terms are
   unique. Furthermore, if $\succeq$ is a confluent reduction relation we have
   $t=t'$ iff there is a term $t''$ s.t. $t\succ t''$ and $t'\succ t''$
   #+END_theorem

   #+ATTR_LATEX: :options [Newman's lemma]
   #+BEGIN_theorem
   Let $\succeq$ be the transitive and reflexive closure of $\succ_1$, and let
   $\succ_1$ be weakly confluent. Then the normal form w.r.t. $\succ_1$ of a
   strongly normalizing $t$ is unique. Moreover, if all terms are strongly
   normalizing w.r.t. $\succ_1$ then the relation $\succeq$ is confluent.
   #+END_theorem

   #+BEGIN_proof
   Assume WCR, and let write $s\in UN$ to indicate that $s$ has a unique normal
   form. Assume $t\in SN, t\not\in UN$. Then there are two reduction sequences
   $t\succ_1 t_1'\dots\succ_1 t'$ and $t\succ_1 T_1''\succ_1\dots\succ_1 t''$ with
   $t'\not\equiv t''$. Then either $t'_1=t''_1$ or $t'_1\neq t_1''$

   In the first case we can take $t_1:=t_1'=t_1''$. In the second case, by WCR
   we can find a $t^*$ s.t. $t^*\prec t_1',t_1''$; $t\in SN$ hence $t^*\succ
   t'''$ for some normal $t'''$. Since $t'\neq t'''$ or $t''\neq t'''$, either
   $t_1'\not\in UN$ or $t_1''\not\in UN$; so take $t_1:=t_1'$ if $t'\neq t'''$,
   $t_1:=t_1''$ otherwise.

   Hence we can always find a $t_1\prec t$ with $t_1\not\in UN$ and get an
   infinite sequence contradicting the SN of $t$
   #+END_proof

   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   The *simple typed lambda calculus* $\lambda_\to$ is the calculus of
   \beta-reduction and \beta-equality on the set of terms of $\lambda_\to$.
   $\lambda_\to$ has the term system as described with the following axioms and
   rules for $\prec$ ($\prec_\beta$) and $=$ (is $=_\beta$)
   \begin{align*}
   &t\succeq t\quad(\lambda x^A.t^B)s^A\succeq t^B[x^A/s^A]\\
   &\frac{t\succeq s}{rt\succeq rs}\quad
   \frac{t\succ s}{tr\succ sr}\quad
   \frac{t\succeq s}{\lambda x.t\succeq\lambda x.s}\quad
   \frac{t\succeq s\quad s\succeq r}{t\succeq r}\\
   &\frac{t\succeq s}{t=s}\quad\frac{t=s}{s=t}\quad
   \frac{t=s\quad s=r}{t=r}
   \end{align*}
   The *extensional simple typed lambda calculus* $\lambda\eta_\to$ is the
   calculus of \beta\eta-reduction and \beta\eta-equality and the ser of terms
   of $\lambda_\to$; in addition there is the axiom
   \begin{equation*}
   \lambda x.tx\succeq t\quad(x\not\in\fv(t))
   \end{equation*}
   #+END_definition

   #+ATTR_LATEX: :options [Substitutivity of $\succ_\beta$ and $\succ_{\beta\eta}$]
   #+BEGIN_lemma
   For $\succeq$ either $\succeq_\beta$ or $\succ_{\beta\eta}$ we have
   \begin{equation*}
   \text{if } s\succeq s' \text{ then } s[y/s'']\succeq s'[y/s'']
   \end{equation*}
   #+END_lemma
   #+BEGIN_proof
   By induction on the depth of a proof of $s\succeq s'$. It suffices to check
   the crucial basis step, where $s$ is $(\lambda x.t)t'$ and $s'$ is $t[x/t']$.
   \begin{equation*}
   (\lambda x.t)t'[y/s'']=(\lambda x.(t[y/s''])t'[y/s''])=
   t[y/s''][x/t'[y/s'']]=t[x/t'][y/s'']
   \end{equation*}
   #+END_proof

   #+ATTR_LATEX: :options []
   #+BEGIN_proposition
   $\succ_{\beta,1}$ and $\succ_{\beta\eta,1}$ are weakly confluent
   #+END_proposition
   #+BEGIN_proof
   If the conversions leading from $t$ to $t'$ and $t$ to $t''$ concern disjoint
   redexes, then $t'''$ is simply obtained by converting both redexes

   If $t\equiv\dots(\lambda x.s)s'\dots$, $t'\equiv\dots s[x/s']\dots$ and
   $t''\equiv\dots(\lambda x.s)s''\dots$, $s'\succ_1 s''$, then $t'''\equiv\dots
   s[x/s'']\dots$

   If $t\equiv\dots(\lambda x.s)s'\dots$, $t'\equiv\dots s[x/s']\dots$ and
   $t''\equiv\dots(\lambda x.s'')s'\dots$, $s\succ_1 s''$, then $t'''\equiv\dots
   s''[x/s']\dots$

   If $t\equiv\dots(\lambda x.sx)s'$, $t'=\dots (sx)[x/s']\dots$,
   $t''\equal\dots ss'\dots$
   #+END_proof

   #+ATTR_LATEX: :options []
   #+BEGIN_theorem
   The terms of $\lambda_\to,\lambda\beta_\to$ are SN for $\succeq_\beta$ and
   $\succeq_{\beta\eta}$ respectively, then hence the \beta- and
   \beta\eta-normal forms are unique
   #+END_theorem


   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   $\succeq_p$ on $\lambda_\to$ is generated by the axiom and rules
   \begin{alignat*}{2}
   &(\text{id})x\succeq_p x\\
   &(\lambda\text{mon})\frac{t\succeq_p t'}{\lambda x.t\succeq_p \lambda x.t'}&&
   (\text{appmon})\frac{t\succeq_p t'\quad s\succeq_p s'}{ts\succeq_p t's'}\\
   &(\beta\text{par})\frac{t\succeq_p t'\quad s\succeq_ps'}{(\lambda x.t)s\succeq_pt'[x/s']}
   &&(\eta\text{par})\frac{t\succeq_p t'}{\lambda x.tx\succeq_pt'}
   (x\not\in\fv(t))
   \end{alignat*}
   #+END_definition
   
   #+ATTR_LATEX: :options [Substitutivity of $\succ_p$]
   #+BEGIN_lemma
   If $t\succ_p t',s\succ_p s'$, then $t[x/s]\succ_p t'[x/s']$
   #+END_lemma

   #+BEGIN_proof
   By induction on $t$. 

   1. $t\equiv(\lambda y.t_1)t_2$, then
      \begin{align*}
      &t\succeq_p t_1'[y/t_2']\\
      &t[x/s]\equiv(\lambda y.t_1[x/s])t_2[x/s]\succeq_p
      t_1'[x/s'][y/t_2'[x/s']]\succeq_p
      t_1'[y/t_2'][x/s']
      \end{align*}
   #+END_proof

   #+ATTR_LATEX: :options []
   #+BEGIN_lemma
   $\succeq_p$ is confluent
   #+END_lemma

   #+BEGIN_proof
   Induction on $t$
   #+END_proof

   #+ATTR_LATEX: :options []
   #+BEGIN_theorem
   \beta- and \beta\eta-reduction are confluent
   #+END_theorem
   #+BEGIN_proof
   The reflexive closure of $\succ_1$ for \beta\eta-reduction is contained in
   $\succeq_p$, and $\succeq$ is therefore the transitive closure of
   $\succeq_p$. Write $t\succeq_{p,n}t'$ if there is a chain
   $t\equiv t_0\succeq_p t_1\succeq_p\dots\succeq_pt_n\equiv t'$. Then we show
   by induction on $n+m$ using the preceding lemma, that if
   $t\succeq_{p,n}t',t\succeq_{p,m}t''$ then there is a $t'''$ s.t.
   $t'\succeq_{p,m}t''',t''\succeq_{p,n}t'''$ 
   \begin{center}
   \begin{tikzcd}
   t \arrow[r,"\alpha-1"] \arrow[rd,"n+m+1-\alpha"{left}]&
   t_0' \arrow[r,"1"] \arrow[rd,"n+m+1-\alpha"]&
   t' \arrow[rd]\\
   &t'' \arrow[r,"\alpha-1"] &
   t_0''' \arrow[r]&t'''
   \end{tikzcd}
   \end{center}
   
   #+END_proof

   #+ATTR_LATEX: :options [Terms of typed combinatory logic $\cl_\to$]
   #+BEGIN_definition
   The terms are inductive defined as in the case of $\lambda_\to$, but now with
   the clauses
   1. For each $A\in\calt_\to$ there is a countably infinite supply of variables
      of type $A$; for arbitrary variables of type $A$ we use
      $u^A,v^A,w^A,x^A,y^A,z^A$
   2. for each $A,B,C\in\calt$ there are constant terms
      \begin{align*}
      &\bk^{A,B}\in A\to(B\to A)\\
      &\bs^{A,B,C}\in (A\to(B\to C))\to((A\to B)\to(A\to C))
      \end{align*}
   3. if $t^{A,B},s^A$ are terms, then so is $t^{A,B}s$

      
   $\fv(\bk)=\fv(\bs)=\emptyset$
   #+END_definition

   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   The *weak reduction* relation $\succeq_w$ on the terms of $\cl_\to$ is
   generated by a conversion relation $\cont_w$ consisting of the following
   pairs
   \begin{equation*}
   \bk^{A,B}x^Ay^B\e\cont_w\e x,\quad\bs^{A,B,C}x^{A\to(B\to C)}y^{A\to B}z^A
   \e\cont_w\e xz(yz)
   \end{equation*}

   In otherwords, $\cl_\to$ is the term system defined above with the following
   axioms and rules for $\succeq_w$ and $=_w$
   \begin{alignat*}{3}
   &t\succeq t&&\bk xy\succeq x\quad&&\bs xyz\succeq xz(yz)\\
   &\frac{t\succeq s}{rt\succeq rs}\quad&&\frac{t\succeq s}{tr\succeq sr}&&
   \frac{t\succeq s\quad s\succeq r}{t\succeq r}\\
   &\frac{t\succeq s}{t=s}&&\frac{t=s}{s=t}&&\frac{t=s\quad s=r}{t=r}
   \end{alignat*}
   #+END_definition

   #+ATTR_LATEX: :options []
   #+BEGIN_theorem
   The weak reduction relation in $\cl_\to$, is confluent and
   strongly normalizing, so normal forms are unique.
   #+END_theorem

   #+ATTR_LATEX: :options []
   #+BEGIN_theorem
    To each term $t$ in $\cl_\to$, there is another term $\lambda^*x^A.t$ such
    that
    1. $x^A\not\in\fv(\lambda^*x^A.t)$
    2. $(\lambda^*x^A.t)s^A\succ_wt[x^A/s^A]$
   #+END_theorem
   #+BEGIN_proof
   \begin{align*}
   &\lambda^*x^A.x:=\bs^{A,A\to A,A}\bk^{A,A\to A}\bk^{A,A}\\
   &\lambda^*x^A.y^B:=\bk^{B,A}y^B\text{ for }y\not\equiv x\\
   &\lambda^*x^A.t_1^{B\to C}t_2^B:=\bs^{A,B,C}(\lambda^*x.t_1)(\lambda^*x.t_2)
   \end{align*}
   #+END_proof

   #+ATTR_LATEX: :options []
   #+BEGIN_corollary
   $\cl_\to$ is *combinatorially complete*, i.e. for every applicative
   combination $t$ of $\bk,\bs$ and variables $x_1,x_2,\dots x_n$ there is a
   closed term $s$ s.t. in $\cl_\to\vdash sx_1\dots x_n=_w t$, in fact even
   $\cl_\to\vdash sx_1\dots x_n\succeq_w t$
   #+END_corollary

   #+BEGIN_remark
   Note that: it's not true that if $t=t'$ then $\lambda^*x.t=\lambda^*x.t'$. 
   $\bk x\bk=x$ but $\lambda^*x.\bk x\bk=\bs(\bs(\bk\bk)(\bs\bk\bk))(\bk\bk)$,
   $\lambda^*x.x=\bs\bk\bk$
   #+END_remark

   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   The *Church numerals* of type $A$ are \beta-normal terms $\bar{n}_A$ of type 
   $(A\to A)\to(A\to A), n\in\N$, defined by
   \begin{equation*}
   \bar{n}_A:=\lambda f^{A\to A}\lambda x^A.f^n(x)
   \end{equation*}
   where $f^0(x):=x,f^{n+1}(x):=f(f^n(x))$. $N_A=\{\bar{n}_A\}$
   #+END_definition
   N.B. If we want to use \beta\eta-normal terms, we must use $\lambda f^{A\to
   A}.f$ instead of $\lambda fx.fx$ for $\bar{1}_A$

   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   A function ff$f:\N^k\to\N$ is said to be *A-representable* if there is a term $F$
   of $\lambda_\to$ s.t. (abbreviating $\bar{n}_A$ as $\bar{n}$)
   \begin{equation*}
   F\bar{n}_1\dots\bar{n}_k=\bar{f(n_1,\dots,n_k)}
   \end{equation*}
   for all $n_1,\dots,n_k\in\N,\bar{n}_i=(\bar{n}_i)_A$
   #+END_definition


   #+ATTR_LATEX: :options []
   #+BEGIN_definition
   *Polynomials*, *extended polynomials*
   1. The \(n\)-argument *projections* $\bp_i^n$ are given by
      $\bp_i^n(x_1,\dots,x_n)=x_i$, the unary constant functions $\bc_m$ by
      $\bc_m(x)=m$, and $\sg$, $\bar{sg}$ are unary functions which satisfy
      $\sg(S_n)=1$, $\sg(0)=0$, where $S$ is the successor function.
   2. The \(n\)-argument function $f$ is the *composition* of \(m\)-argument $g$,
      \(n\)-argument $h_1,\dots,h_m$ if $f$ satisfies
      $f(\bar{x})=g(h_1(\bar{x}),\dots,h_m(\bar{x}))$
   3. The *polynomials* in $n$ variables are generated from $\bp_i^n,\bc_m$,
      addition and multiplication by closure under composition. The *extended
      polynomials* are generated from $\bp_i^n,\bc_m,\sg,\bar{sg}$, addition and
      multiplication by closure under proposition
   #+END_definition

   #+BEGIN_exercise
   Show that all terms in \beta-normal form of type $(P\to P)\to(P\to P)$, $P$ a
   propositional variable, are either of the form $\bar{n}_P$ or of the form
   $\lambda f^{P\to P}.f$
   #+END_exercise
   #+BEGIN_proof
   1. $\lambda f^{P\to P}.g^{P\to P}$, if $g\neq f$, then $g$ is of the form
      $\lambda x^P.y^P$ and hence $\lambda f^{P\to P}\lambda x^P.y^P$
   #+END_proof
