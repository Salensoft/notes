* Introduction
** Get_Line
   + inputs
     + a prompt string
     + a buffer to accept the input, at least 2 character long
     + an indication of the buffer length
   + outputs
     + a success/fail status
     + success : the input is stored in the supplied buffer, the end of the
       input is marked with NUL character
     + fail : the buffer may have been modified but won't contain valid input
#+BEGIN_SRC c
  FLAG Get_Line (char *prompt, char *buffer, int len, char *default) {
    char *cptr = buffer;
    Flag isinsert = TRUE;
    FLAG waskey = TRUE;
    int key;

    if (len < 2) //safety check
      return FALSE;

    strcpy(buffer, default);
    for (;;) {
      ToStartOfLine();
      ClearLine();
      printf("%s: %s", prompt, buffer);
      PositionCursor(strlen(prompt) + 2 + (cptr - buffer));

      key = KeyGet();
      if (isprint(key)) {
        if (!waskey){
          cptr = buffer;
          ,*cptr = NUL;
          waskey = TRUE;
        }
        if (isinsert) {
          if (buffer + strlen(buffer) >= len - 1) Beep();
          else {
            memmove(cptr + 1, cptr, strlen(cptr) + 1);
            ,*cptr++ = key;
            ,*cptr = NUL;
          }
        }
        else {
          if (*cptr == NUL) {
            //end of input, so append to buffer
            if (buffer + strlen(buffer) >= len - 1)
              Beep();
            else {
              ,*cptr++ = key;
              ,*cptr = NUL;
            }
          }
          else
            ,*cptr++ = key;//replace
        }
      }
      else {
        switch (key) {
        case KEYBACK:
          if (!waskey) {
            cptr = buffer;
            ,*cptr = BUL;
            waskey = TRUE;
          }
          if (cptr > buffer) {
            xstrcpy(cptr - 1, cptr);
            cptr--;
            ,*cptr = NUL;
          }
          break;
        case KEYDEL: //delete the following char
          if (cptr < buffer + strlen(buffer))
            xstrcpy(cptr, cptr + 1);
          else Beep();
          break;
        case KEYENTER:
          printf("\n");
          return (TRUE);
        case KEYLEFT:
          if (cptr > buffer) cptr--;
          waskey = TRUE;
          break;
        case KEYRIGHT:
          if (cptr < buffer + strlen(buffer)) cptr++;
          waskey = TRUE;
          break;
        case KEYSTART: //move to start of response
          cptr = buffer;
          waskey = TRUE;
          break;
        case KEYEND: //move to end of response
          cptr = buffer + strlen(buffer);
          waskey = TRUE;
          break;
        case KEYQUOTE: //insert the next character, even if it's a control char
          if (!waskey) {
            cptr = buffer;
            ,*cptr = NUL;
            waskey = TRUE;
          }
          key = KeyGet();
          if (isinsert) {
            if (buffer + strlen(buffer) >= len -  1)
              Beep();
            else { //move rest of line and insert
              memmove(cptr + 1, cptr, strlen(cptr) + 1);
              ,*cptr++ = key;
              ,*cptr = NUL;
            }
          }
          else {
            if (*cptr == NUL) { //end of input, so append
              if (buffer + strlen(buffer) >= len - 1)
                Beep();
              else {
                ,*cptr++ = key;
                ,*cptr = NUL;
              }
            }
            else
              ,*cptr++ = key; //replace
          }
          break;
        case KEYCLEAR: //erase response
          cptr = buffer;
          ,*cptr = NUL;
          waskey = TRUE;
          break;
        case KEYDEFAULT: //restore default response
          strcpy(buffer, default);
          cptr = buffer;
          waskey = FALSE;
          break;
        case KEYCANCEL: //abort out of editing
          return (FALSE);
        case KEYREDISPLAY: //redisplay the prompt and resp
          break;
        case KEYINSERT: //set insert mode
          isinsert = TRUE;
          break;
        case KEYREPLACE: //set replace mode
          isinsert = FALSE;
        default:
          Beep();
          break;
        }
      }
    }
  }
#+END_SRC
** Forest
   + What characteristics of the display and keyboard affect text editing
   + How should the program cope with presenting output on different way
   + What view of the text should be presented to the user
   + How should the text be managed so that large amounts of text could be
     edited efficiently
   + How should display updating occur so that editing changes are efficiently
     presented to the user
   + How should the command set be designed? What should the meanings of the
     various commands be?
   + How should the program be designed so that the user can change how it operates
* Chap1: Users
* Chap3 Implementation Language
** General consideration
*** Text handle power
    + waiting for user input
    + parsing that input
    + setting up to execute the commands
    + executing the commands
    + determining the effect of those commands on the screen
    + update the screen
*** support for extensibility
    + late binding of names to procedures through indirect calls, dynamic linking,
      or other techniques
    + retaining and using the symbol table information at run time so that the user
      can think of changes in terms of names, not address
    + internal error and consistency checking under program control so that users
      can be protected from their mistakes
    + the ability to add code to the executing editor
*** Large project support
    + division of the program into separate modules
    + division of the program into separate files
    + separate compilation
    + a way to organize the global name space
    + a way to keep objects out of the global name space
    + automatic verification of procedure call/declaration compatibility
    + conditional compilation
    + compilation constraint
    + a way of constructing "data abstraction" that package procedures and private state
      information
    + a way of dynamically allocating memory
* chap4 Editing models
** one-dimensional array
** two-dimensional array
** list of lines
** paged models
** objects
** dealing with real text
   + text ::
     + characters
     + words
     + phrases
     + sentences
     + paragraphs
     + subsections
     + sections
     + chapters
     + documents
* chap5 file formats
* chap6 the internal sub-editor
** Basic concepts and definition
   + Buffer ::
     + one file to many buffer
   + write, read, insert
   + point, the point can exist only between two characters: it's
     never on a character.
   + The start of the buffer(which corresponds to the first location in the
     file) is considered *before* or *backward from* the point. The end of the buffer
     is considered to be *after* or *forward from* the point.
   + mark :: an object that can remember a position. There can be any number of
             marks, and more than one mark can remember the same position. A
             mark is always located between two character
     + e.g. a mark may remember a specific locaion for future reference.
       For example, a command might paginate a file. In this case, a mark would
       remember where the point was when the command was invoked. THus the point
       could be moved during the re-pagination and returned to its intial starting
       place.
     + A mark can serve as bound for iteration. For example, the "fill paragraph"
       command might place a mark at its starting place, move to the end of the
       paragraph and place a mark there, then move to the begining of the paragraph,
       then move to the beginning of the paragraph. It then performs a "fill region"
       operation, filling from the point to the location of the second mark.
     + normal marks :: move with insertion
     + fixed marks :: remain in place
   + When there is exactly one mark, the range of characters between the point
     and the mark is called the *region*
   + mode :: a set of alternations to the user-oriented command set.
   + character :: basic unit of change within a buffer
** internal data structures
   + world ::
#+NAME: buffer
#+BEGIN_SRC c
  struct world {
    struct buffer *buffer_chain;
    struct buffer *current_buffer;
  };
#+END_SRC
   + buffer ::
#+NAME: buffer
#+BEGIN_SRC c
  struct buffer {
    //mechanism used for implementing the circular list of buffers
    //the list is circular because there is no perferred buffer and
    //it should be possible to get to any buffer with equal case
    struct buffer *next_chain_entry;
    char buffer_name[BUFFERNAMEMAX];

    location point;
    int cur_line;
    int num_chars;
    int num_lines;

    struct mark *mark_list;

    struct storage *contents;
    char file_name[FILENAMEMAX];
    //name of the file asscociated with the buffer, otherwise empty string
    time file_time;
    FLAG is_modified;

    struct mode *mode_list;
  }
#+END_SRC
   + mark ::
#+NAME: mark
#+BEGIN_SRC c
  struct mark {
    struct mark *next_mark; //NULL indicateds the end of the chain
    mark_name name;
    location where_it_is;
    FLAG is_fixed;
  }
#+END_SRC
   + mode ::
#+NAME: mode
#+BEGIN_SRC c
  struct mode {
    struct mode *next_mode;
    char *mode_name;
    status (*add_proc)();
  }
#+END_SRC
** Procedure interface definition
   + assume callee allocate data structures.
#+NAME: world
#+BEGIN_SRC c++
  //basic set-up-housekeeping call. It should perform all required one-time
  //initialization operations. No other sub-editor procedure except for
  //World_Fini can be legally called unless World_Init returns a successful
  //status.
  status World_Init(void);
  status World_Fini(void);
  status World_Save(char *file_name);
  status World_Load(char *file_name);
#+END_SRC
   + If you are creating a "stripped down" editor, the *World_Save* and *World_Load*
     routines wouldn't do anything.
#+NAME: buffer
#+BEGIN_SRC c
  status Buffer_Create(char *buffer_name);
  status Buffer_Clear(char *buffer_name);
  status Buffer_Delete(char *buffer_name);
  //sets the current buffer to the one specified
  status Buffer_Set_Current(char *buffer_name);
  //sets the current buffer to the next one in the chain, and it returns
  //the name of the new buffer. This mechanism allows for iterating through
  //all buffers looking for one which meets an arbitrary test.
  char *Buffer_Set_Next(void);
  status Buffer_Set_Name(char *buffer_name);
  char *Buffer_Get_Name(void);
#+END_SRC
#+NAME: point
#+BEGIN_SRC c
  status Point_Set(location loc);
  //moves the point forward(if count is positive) or backward(if negative) by
  //abs count
  status Point_Move(int count);
  location Point_Get(void);
  //return the number of the line that the point is on. Note that while
  //characters are numbered starting from zero, lines are numbered starting from
  //
  int Point_Get_Line(void);
  location Buffer_Start(void);
  location Buffer_End(void);
#+END_SRC
#+NAME: location
#+BEGIN_SRC c
  //returns 1 if loc1 is after loc2
  int Compare_Locations(location loc1, location loc2);
  //accepts a location and returns the number of characters between the
  //location and the beginning of the buffer. The point's percentage position
  //can be computed by
  //((float)Location_To_Count(Point_Get()) * 100.) / ((float)Get_Num_Chars())
  int Location_To_Count(location loc);
  //accepts a non-negative count and converts it to the corresponding location
  location Count_To_Location(int count);
#+END_SRC
#+NAME: mark
#+BEGIN_SRC c
  Point_Set(Count_To_Location(count));

  status Mark_Create(mark_name *name, FLAG is_fixed);
  void Mark_Delete(mark_name name);
  status Mark_To_Point(mark_name name);
  //set the point to the location of the specified mark
  status Point_To_Mark(mark_name name);
  location Mark_Get(mark_name name);
  status Mark_Set(mark_name name, location loc);
  FLAG Is_Point_At_Mark(mark_name name);
  FLAG Is_Point_Before_Mark(mark_name name);
  FLAG Is_Point_After_Mark(mark_name name);
  //swaps the locations of the point and the specified mark
  status Swap_Point_And_Mark(mark_name);
#+END_SRC
#+NAME: example
#+BEGIN_SRC c
  status Do_Something_Over_Region(mark_name name) {
    FLAG was_before = Is_Point_Before_Mark(name);
    mark_name saved;
    status stat = OK;

    //ensure that the point is before the mark
    if (!was_before) Swap_Point_And_Mark(name);

    //remember where we started
    if (Mark_Create(&saved) != OK) {
      if (!was_before) Swap_Point_And_Mark(name);
      return NOT_OK;
    }

    //loop until get to the mark
    for (; !Is_Point_At_Mark(name); Point_Move(1)) {
      if (/*do something*/ != OK) {
        stat = NOT_OK;
        break;
      }
    }

    Point_To_Mark(saved);
    Mark_Delete(saved);

    //put the point and mark back where they started
    if (!was_before)
      Swap_Point_And_Mark(name);
    return stat;
  }
#+END_SRC
#+NAME: get
#+BEGIN_SRC c
  //return the character after the point. Its result are undefined if the point
  //is at the end of the buffer
  char Get_Char(void);
  //returns up to count characters starting from the point. It will return fewer
  //than count character if the end of the buffer is encountered.
  void Get_String(char *string, int count);
  //return the number of characters in the buffer.
  int Get_Num_Chars(void);
  int Get_Num_Lines(void);
#+END_SRC
#+NAME: file
#+BEGIN_SRC c
  void Get_File_Name(char *file_name, int size);
  status Set_File_Name(char *file_name);
  status Buffer_Write(void);
  status Buffer_Read(void);
  //inserts the contents of the specified file into the buffer at the point,
  //making any required conversions between the external and internal representations.
  status Buffer_Insert(char *file_name);
  FLAG Is_File_Changed(void);
  void Set_Modified(FLAG is modified);
  //returns the modification flag
  FLAG Get_Modified(void);
#+END_SRC
#+NAME: mode
#+BEGIN_SRC c
  //If is_front is True, the new mode is added to the front of the mode list
  //else it's added at the end.
  status Mode_Append(char *mode_name, status (*add_proc)(), FLAG is_front);
  status Mode_Delete(char *mode_name);
  status Mode_Invoke(void);
#+END_SRC
#+NAME: insert_delete
#+BEGIN_SRC c
  //inserts one character at the point. The point is placed after the inserted
  //character
  void Insert_Char(char c);
  void Insert_String(char *string);
  void Replace_Char(char c);
  void Replace_String(char *string);
  //removes the specified number of characters from the buffer. The specified
  //number of characters are removed after the point if count is positive or
  //before the point if count negative. If the specified count extends beyond the
  //start or end of the buffer, the excess is ignored.
  status Delete(int count);
  //removes all characters between the point and the mark
  status Delete_Region(mark_name name);
  //copies all characters between the point and the mark to the mark to the specified
  //buffer, inserting them at the point.
  status Copy_Region(char *buffer_name, mark_name name);
#+END_SRC
#+NAME: search
#+BEGIN_SRC c
  //searches forward for the first occurance of string after the point and,
  //if found, leaves the point at the end of the found string.
  status Search_Forward(char *string);
  status Search_Backward(char *string);
  //returns True if the string matches the contents of the buffer starting at
  //the point
  FLAG Is_A_Match(char *string);
  //searches the buffer starting from the point for the first occurence of
  //any character in the supplied string
  status Find_First_In_Forward(char *string);
  status Find_First_In_Backward(char *string);
  status Find_First_Not_In_Forward(char *string);
  status Find_First_Not_In_Backward(char *string);
  //To find
#+END_SRC
#+NAME: column
#+BEGIN_SRC c
  //returns the zero-origin column that the point is in, after taking into account
  //tab stops, varaible-width characters, and other special cases, but not taking
  //into account the screen width
  int Get_Column(void);
  //moves the point to the desired column, stopping at the end of a line if the line
  //is not long enough. If the specified column cannot be reached exactly(due to tab
  //stops or other special cases), it uses the round flag. If the flag is set, the
  //point is "rounded" to the nearest available column position. If the flag is clear,
  //the point is moved to the next highest available column position.
  void Set_Column(int column, FLAG round);
#+END_SRC
** Characteristics of implementation methods
   + assume storing the buffers in the equivalent of main memory
   + first level
     one character
     a small number of characters
     a line
     a large number of characters
     the entire buffer
   + second level(how pieces are managed)
     no management
     extra space at the end
     buffer gap
*** No management
    + length of the piece is the only "overhead" information
#+NAME: no management
#+BEGIN_SRC c
  struct piece{
    int length;
    char data[1];//length of the character
  };

  struct piece *Delete_From_Piece(struct piece *pptr, int start, int len) {
    struct piece *newptr;
    int newlen = pptr->length - len;

    //allocate new piece
    newptr = (struct piece *)malloc(sizeof(struct piece) + newlen - 1);
    if (newptr == NULL)
      return NULL;

    //copy non-deleted part
    memmove(&newptr->data[0], &pptr->data[0], start);
    memmove(&newptr->data[0],
            &pptr->data[start + len],
            pptr->length - (start + len));
    newptr->length = newlen;

    free(pptr);
    return newptr;
  }

  struct piece *Insert_Into_Piece(struct piece *pptr, int start,
                                  int len, char *chrs) {
    struct piece *newptr;
    int newlen = pptr->length + len;

    //allocate new piece
    newptr = (struct piece *)malloc(sizeof(struct piece) + newlen - 1);
    if (newptr == NULL)
      return NULL;

    memmove(&newptr->data[0], &pptr->data[0], start);
    memmove(&newptr->data[start + len], &pptr->data[start], pptr->length - start);
    newptr->length = newlen;
    memmove(&newptr->data[start], chrs, len);
    free(pptr);

    return newptr;
  }
#+END_SRC
*** Extra space at the end
    + the length of the piece and the amount of the piece currently
      in use are kept as overhead information
    + deletion never require a re-allocation
    + insertion will require a re-allocation only when the free space is used up
#+NAME: extra space at the end
#+BEGIN_SRC c
  struct piece {
    int length;
    int used;
    char data[1];
  };

  struct piece *Delete_From_Piece(struct piece *pptr, int start, int len) {
    memmove(&pptr->data[start], &pptr->data[start + len],
            pptr->used - (start + len));
    pptr->used -= len;
    return pptr;
  }

  struct piece *Insert_Into_Piece(struct piece *pptr, int start, int len, char *chrs) {
    struct piece *newptr;
    int newlen;
    int amt = min(pptr->length - pptr->used, len);
    memmove(&pptr->data[start + amt], &pptr->data[start],
            pptr->used - (start + amt));
    memmove(&pptr->data[start], chrs, amt);
    pptr->used += amt;
    len -= amt;
    if (len <= 0) return pptr; //done

    start += amt;
    chrs += amt;
    newlen = Round_Up_To_Block_Size(pptr->length + len);

    //allocate new piece
    newptr = (struct piece *)malloc(sizeof(struct piece) + newlen - 1);
    if (newptr == NULL) return NULL;

    //construct new contents
    memmove(&newptr->data[0], &pptr->data[0], start);
    memmove(&newptr->data[start], chrs, len);
    memmove(&newptr->data[start + len],
            &pptr->data[start],
            pptr->length - start);

    newptr->length = newlen;
    newptr->used = pptr->used + len;

    free(pptr);
    return newptr;
  }
#+END_SRC
*** Buffer gap
**** introduction
    + stores the text as two contiguous sequences of characters with a gap between them.
      Changes are amde to the buffer by first moving the gap to the location to be
      changesd and then inserting or deleting characters by changeing pointers.
    + e.g. Minneapolis
      0   1   2   3   4   5   6   7   8                       9   10  11
      | M | i | n | n | e | a | p | o |   |   |   |   |   | l | i | s |
      ------------------------------------------------------------------
      0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16
       30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45
                      P               GS                  GE

      + first is the user coordinate system. The gap is *invisible* in this system.
        coordinates label the positions between the characters and not the characters
        themselves.
      + second is the gap coordinate system. It's under the line. The internal
        arithmetic of the buffer manager is done in this coordinate system. *GS* is
        the start of the gap, *GE* is the end of the gap
      + If a location is after the start of the gap, it's corresponding location
        in the gap coordinate system is (GapEnd - GapStart) + the location in the
        user coordinate.
      + third coordinate system is the storage coordinate system. It's the means whereby
        the underlying memory locations are referenced. It is labeled from X to X +
        the amount of memory that is available
    + This technique has a very low overhead for examining the buffer. The user coordinate
      location is first converted to the gap coordinate system. The memory location is
      then looked up and its contents returned.
    + There are three cases :
      + the gap is at the point already. No motion
      + The gap is before the point. The gap must be moved to the point. The characters
        after the gap but before the point must be moved before the insertion or deletion
        can take place.
      + The gap is after the point. The gap must be moved to the point. The characters after
        the point but before the gap must be moved before the insertion or deletion can take
        place
    + After the gap has been moved to the point, insertions or deletions are performed
      by moving the GapStart pointer. A deletion is a decrementing of the GapStart pointer.
      An insertion is an incrementing of the GapStart pointer followed by placing the inserted
      character in the memory location that was just incremented over.
    + the gap is only moved when an insertion or deletion is about to take place and
      the last modification was at a different location
**** multiple gaps and why they don't work
     1. the conversion from the user to the gap coordinate system would be more complex
        and take longer.
     2. the average amount of shuffling will go down, but not by anywhere near a factor
        of ten.
     3. ...
**** hidden second gap
     + a second gap at the end of the buffer
*** Linked line
#+NAME: linked line
#+BEGIN_SRC c
  struct line {
    struct line *next;
    struct line *previous;
    struct piece *theline;
    int version; //optional
    struct marks *mark_lists;
  }
#+END_SRC
    + a buffer location in this method is typically represented as a (line pointer, offset)
      pair. *Marks* are always asscociated with a line. *Marks* can thus be efficiently
      implemented by a per-line mark list.
*** Paged buffer gap
    + buffer is divided into "pages" of one to two KB each while the file is read in.
    + two point of favor
      1. Since each page is small, the gap need never be moved very far.
      2. Since all pages are the same size, memory management is kept simple.
** Method comparison
*** Efficiency of buffer/file I/O
    * read a file
      * determine the file's length
      * allocate enough memory to hold the file, plus some extra for growth
      * read the file in
    * improve
      map the file into the address space of your process
      no actual data motion takes place until you modify one of the pages
      at that time, the page is copies and the modifications are written to
      the new copy
    * writing the file out can take two calls(one to cover the text in front of the gap
      and the other to cover the text after the gap)
** Editing extremely large files
