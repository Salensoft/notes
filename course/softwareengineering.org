

* 1 The nature of software
** the nature of software
   software application types
   * system software
** the changing nature of software
* 2 Software engineering
  software engineering: The application of a systematic, disciplined,
  quantifiable approach to the development, operation, and maintenance of
  software; that is, the application of engineering to software 
** the software process
   * generic process framework
     1. communication
     2. planning
     3. modelling
     4. construction
     5. deployment
** software engineering practice
   the essence of practice
   1. understand the problem
   2. plan a solution
   3. carry out the plan
   4. examine the result for accuracy
** management myths
* 3 Software process strucutre
** process patterns
   generic software pattern elements
   * intent
   * type
   * initial context
   * solution
   * resulting context
   * related patterns
   * known uses\examples
** process assessment
   SCAMPI, SPICE, CBA IPI, ISO 9001:2000
   
   Capability maturity model CMM
   0. incomplete
   1. performed
   2. managed
   3. defined
   4. quantitatively managed
   5. optimizing
* 4 Process models
** prescriptive models
   1. the waterfall model
      communication - planning - modeling - construction - deployment

      the V model:
      requirement modeling - architectural design - component design - code
      generation - unit testing - integration testing - system testing -
      acceptance testing
   2. incremental process models
      
      rapid application development (RAD) model
   3. evolutionary process models

      spiral model
** Specialized process models
   * Component based development — the process to apply when reuse is a
     development objective 
   * Formal methods — emphasizes the mathematical specification of requirements 
   * Aspect-Oriented Software Development — provides a process and
     methodological approach for defining, specifying, designing, and
     constructing aspects 

** the unified process
   inception phase - elaboration phase - construction phase - transition phase
** personal and team process models
   personal software process(PSP)
   1. Planning
   2. High-level design
   3. High-level design review
   4. Development
   5. Postmortem

      
   team software process(TSP)
   
   obejective
   * Build self-directed teams that plan and track their work, establish goals,
     and own their processes and plans. These can be pure software teams or
     integrated product teams (IPTs) of 3 to about 20 engineers.
   * Show managers how to coach and motivate their teams and how to help
     them sustain peak performance
   * Accelerate software process improvement 
   * Provide improvement guidance to high-maturity organizations.
   * Facilitate university teaching of industrial-grade team skills.
* 31 project management concepts
  4 P's people, product, process, project 
  
  Stakeholders:
  senior managers, project managers, practitioners, customers, end-users

  team leader. MOI model, motivation, organization, ideas or innovations

  paradigms
  * closed paradigm 
  * random paradigm 
  * open paradigm
  * synchronous paradigm

    
  software scop
  * context
  * information objectives
  * function and performance

    
  the project
  1. start on the right foot
  2. maintain momentum
  3. track progress
  4. make smart decision
  5. conduct a postmortem analysis
  
     
  Critical practices include: metric-based project management , empirical cost
  and schedule estimation , earned value tracking, defect tracking against
  quality targets, and people aware management  
* 6 human aspects of software engineering
** the psychology of software engineering
** the software team
   effective software team attributes: Sense of improvement, Diversity of team
   member skill sets, Sense of purpose, Sense of involvement, Sense of trust 
** agile teams
   XP team values: communication, simplicity, feedback, courage, respect
* 7 principles that guide practice
* 8 understanding requirements
  inception, elicitation, elaboration, negotiation, sepcification, validation,
  requirement management
* 9 Requirements Modeling： Scenario-Based Methods
* 11 Requirements Modeling: Behavior, Patterns, and Web/Mobile Apps
  The behavioral model indicates how software will respond to external events or
  stimuli. To create the model, the analyst must perform the following steps: 
  1. Evaluate all use-cases to fully understand the sequence of interaction
     within the system. 
  2. Identify events that drive the interaction sequence and understand how
     these events relate to specific objects. 
  3. Create a sequence for each use-case.
  4. Build a state diagram for the system.
  5. Review the behavioral model to verify accuracy and consistency.

     
  requirements modeling for webapps
  * content analysis
  * interaction analysis
  * functional analysis
  * configuration analysis

    
** requirements modeling for web and mobile apps
*** content modeling
    * Content objects are extracted from use-cases
      * examine the scenario description for direct and indirect references to content
    * Attributes of each content object are identified
    * The relationships among content objects and/or the hierarchy of content
      maintained by a WebApp 
      * Relationships—entity-relationship diagram or UML
      * Hierarchy—data tree or UML
*** interaction modeling
    * four elements
      * use-cases
      * sequence diagrams
      * state diagrams  
      * a user interface prototype
*** functional model
*** configuration model
* 12 design concepts
  data/class, architecture, interface, component
** The design process
   design and quality
   * the design must implement all of the explicit requirements 
   * the design must be a readable, understandable guide
   * the design should provide a complete picture of the software
* 19 quality concepts
* 13 architectural design
* 17 webapp design
  design & webapp quality
  * security
  * availability
  * scalability
  * time to market

    
  webapp design goals
  * consistency
  * identity
  * robustness
  * navigability
  * visual appeal
  * compatibility

    
  webapp design pyramid
  * user
  * interface design
  * aesthetic design 
  * content design 
  * navigation design
  * architecture design 
  * component design
* 18 mobileapp design
** mobileapp development process model
   formulation - planning - analysis - engineering - implementation and
   testing - user evaluation
** mobileapp design mistakes
   kitchen sink, inconsistency, overdesigning, lack of speed, verbiage,
   non-standard interaction, help-and-FAQ-itis
* 20 Review techniques
** defect amplification and removal
   defect amplification model

   
+------------------------------+------------------------------+
|    errors passed through     |                              |
+------------------------------+                              |
|     amplified errors 1:x     |      percent efficiency      |
+------------------------------+                              |
|    newly generated errors    |                              |
+------------------------------+------------------------------+
** review metrics and their use
   $E_{review}=E_p+E_a+E_r, Err_{tot}=Err_{minor}+Err_{major}$

   $\text{defect density}=Err_{tot}/\text{WPS}$
** review metrics
** reference model
* 14 Component-level design
  design guidelines
  * components
  * interfaces
  * dependencies and inheritance
* 29 software configuration management
* 23 testing conventional applications
  V(G)=E-N+2
* 24 testing object-oriented applications
* 26 testing mobile applications
* 34 project scheduling
* exam
** 2003-2004
*** select
    
