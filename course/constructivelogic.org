#+LATEX_HEADER: \usepackage{bussproofs}
#+LATEX_HEADER: \newcommand{\bl}[1] {\boldsymbol{#1}}
#+LATEX_HEADER: \usepackage{bm}
#+LATEX_HEADER: \newcommand\bolden[1]{{\boldmath\bfseries#1}}
* Overview
  we call a logic *constructive* if its proofs describe effective constructions, or describe
  *algorithms*
* natural deduction
  + a
    \begin{prooftree}
    \AxiomC{}
    \RightLabel{$\top I$}
    \UnaryInfC{$\top true$}
    \end{prooftree}
  + it looks like a derivation of A ⊃ B true from
    the hypothesis A true. But the assumption A true
    is introduced in the process of proving A ⊃ B true; the conclusion should not depend
    on it! Certainly, whether the implication A⊃B is true is independent of the question
    whether A itself is actually true.
  + b
    \begin{prooftree}
    \AxiomC{$\perp$ true}
    \RightLabel{$\perp E$}
    \UnaryInfC{C true}
    \end{prooftree}
    since $\perp$ cannot be true
  + $\neg A=(A\supset \perp)$
* Proofs as program
** Propositions as types
   + $M:A$ $M$ is a proof term for proposition A, $M$ is a program of type A
     ∀M:A should correspond to a deduction of /A true/ with an identical structure and vice versa.
     Hence $M$ will correspond directly to the corresponding proof of A true
   + conjunction ::
     + a
       \begin{prooftree}
       \AxiomC{$M:A$}
       \AxiomC{$N:B$}
       \RightLabel{$\wedge I$}
       \BinaryInfC{$<M,N>:A\wedge B$}
       \end{prooftree}
       \begin{prooftree}
       \AxiomC{$M:A\wedge B$}
       \RightLabel{$\wedge E_1$}
       \UnaryInfC{\textbf{fst} $M:A$}
       \end{prooftree}
   + truth ::
     + we
        \begin{prooftree}
        \AxiomC{}
        \RightLabel{$\top I$}
        \UnaryInfC{$<>:\top$}
        \end{prooftree}
       unit type *1*
   + implication ::
     + w
       \begin{prooftree}
       \AxiomC{}
       \RightLabel{$u$}
       \UnaryInfC{$u:A$}
       \noLine
       \UnaryInfC{$\vdots$}
       \noLine
       \UnaryInfC{$M:B$}
       \RightLabel{$\supset I^u$}
       \UnaryInfC{\textbf{fn} $u\Rightarrow M:A\supset B$}
       \end{prooftree}

       \begin{prooftree}
       \AxiomC{$M:A\supset B$  $N:A$}
       \RightLabel{$\supset E$}
       \UnaryInfC{$MN:B$}
       \end{prooftree}
   + Disjunction ::
     + w
       \begin{prooftree}
       \AxiomC{$M:A$}
       \RightLabel{$\lor I_1$}
       \UnaryInfC{\textbf{inl} $M:A\lor B$}
       \end{prooftree}
       injection l/r
       \begin{prooftree}
       \AxiomC{$M:B$}
       \RightLabel{$\lor I_2$}
       \UnaryInfC{\textbf{inr} $M:A\lor B$}
       \end{prooftree}

       \begin{prooftree}
       \AxiomC{$M:A\lor B$}
       \AxiomC{}
       \RightLabel{$u$}
       \UnaryInfC{$u:A$}
       \noLine
       \UnaryInfC{$\vdots$}
       \noLine
       \UnaryInfC{$N:C$}
       \AxiomC{}
       \RightLabel{$w$}
       \UnaryInfC{$w:B$}
       \noLine
       \UnaryInfC{$\vdots$}
       \noLine
       \UnaryInfC{$O:C$}
       \RightLabel{$\lor E^{u,w}$}
       \TrinaryInfC{\textbf{case} $M$ \textbf{of inl} $u\Rightarrow N$ | \textbf{inr} $w\Rightarrow O:C$}
       \end{prooftree}
   + Falsehood ::
     + w
       \begin{prooftree}
       \AxiomC{$M:\perp$}
       \RightLabel{$\perp E$}
       \UnaryInfC{\textbf{abort} $M:C$}
       \end{prooftree}
   + guiding principles behind the assignment of proof terms to deductions ::
     1. For every deduction of A true there is a proof term M and deduction of $M:A$
     2. For every deduction of M : A there is a deduction of A true
     3. The correspondence between proof terms M and deductions of A true is a bijection.
** Reduction
   + Conjunction ::
     + $\textbf{fst}<M,N>\Rightarrow_R M$
   + Implication ::
     + *λ-abstraction*
       $f(3)=(\lambda x.x^2+x-1)(3)=[3/x](x^2+x-1)=11$
       $(\textbf{fn} u\Rightarrow M)N\Rightarrow_R[N/u]M$
   + Disjunction ::
     + $\textbf{case inl } M \textbf{of inl } u\Rightarrow N | \textbf{inr} w\Rightarrow O
       \Rightarrow_R[M/u]N$
   + Example ::
     + for $\textsf{comp}:((A\supset B)\wedge(B\supset C))\supset(A\supset C)$
       \begin{align*}
       \textsf{comp}<f,g>(w)&=g(f(w))\\
       \textsf{comp}<f,g>&=\textsf{fn } w\Rightarrow g(f(w))\\
       \textsf{comp } u&=\textsf{fn } w\Rightarrow (\textbf{snd } u)((\textbf{fst } u)(w))\\
       \textsf{comp}&=\textsf{fn } u\Rightarrow \textsf{fn } w\Rightarrow(\textbf{snd } u)((\textbf{fst } u) w)
       \end{align*}
     +
* Harmony
** Local soundness and local completeness
   + local soundness ::
     + the elimination rules are not too strong : no matter how we apply
       elimination rules to the result of an introduction we cannot gain
       any new information.
       Witnessed by a *local reduction*
   + local completeness ::
     + the elimination rules are not too weak: there is always a way to apply elimination
       rules so that we can reconsitute a proof of the original proposition from the
       results by applying introduction rules.
       Witnessed by a *local expansion*
   +
#+BEGIN_SRC latex
  \begin{prooftree}
    \AxiomC{$\mathcal{D}$}
    \noLine
    \UnaryInfC{A true}
  \end{prooftree}
  $\Rightarrow_R$
  \begin{prooftree}
    \AxiomC{$\mathcal{D'}$}
    \noLine
    \UnaryInfC{A true}
  \end{prooftree}
#+END_SRC
     for the local reduction of a deduction $\mathcal{D}$ to another deduction $\mathcal{D'}$ of the same judgement
     $A true$
   +
* Verification
** Introduction
   + the meaning of a proposition is determined by its *verification*
   + $A\uparrow$ for _A has a verification_
   + $A\downarrow$ A may be used
   + conjunction ::
     + w
       \begin{prooftree}
       \AxiomC{$A\uparrow$ $B\uparrow$}
       \RightLabel{$\wedge I$}
       \UnaryInfC{$A\wedge B\uparrow$}
       \end{prooftree}
       A verification $A\wedge B\uparrow$ of $A\wedge B$ will continue to seek a verification
       $A\uparrow$ of A as well as a verification $B\uparrow$ of B
       \begin{prooftree}
       \AxiomC{$A\wedge B\downarrow$}
       \RightLabel{$\wedge E_1$}
       \UnaryInfC{$A\downarrow$}
       \end{prooftree}
       If we have license $A\wedge B\downarrow$ to use $A\wedge B$, then we also have license $A\downarrow$ to use A
   + implication ::
     + Introduction rules creates a new hypothesis, which we may use in a proof.
       \begin{prooftree}
       \AxiomC{}
       \RightLabel{$u$}
       \UnaryInfC{$A\downarrow$}
       \noLine
       \UnaryInfC{$\vdots$}
       \noLine
       \UnaryInfC{$B\uparrow$}
       \RightLabel{$\supset I^u$}
       \UnaryInfC{$A\supset B\uparrow$}
       \end{prooftree}
       consist of a verification $B\uparrow$ of B that has license $A\downarrow$ to use the
       additional hypothesis A
       in order to use an implication $A\supset$ we first require a verification of A
       \begin{prooftree}
       \AxiomC{$A\supset B\downarrow$ $A\uparrow$}
       \RightLabel{$\supset E$}
       \UnaryInfC{$B\downarrow$}
       \end{prooftree}

   + disjunction ::
     + w
       \begin{prooftree}
       \AxiomC{$A\uparrow$}
       \RightLabel{$\lor I_L$}
       \UnaryInfC{$A\lor B\uparrow$}
       \end{prooftree}
       \begin{prooftree}
       \AxiomC{$A\lor B\downarrow$}
       \AxiomC{}
       \RightLabel{$u$}
       \UnaryInfC{$A\downarrow$}
       \noLine
       \UnaryInfC{$\vdots$}
       \noLine
       \UnaryInfC{$C\uparrow$}
       \AxiomC{}
       \RightLabel{$w$}
       \UnaryInfC{$B\downarrow$}
       \noLine
       \UnaryInfC{$\vdots$}
       \noLine
       \UnaryInfC{$C\uparrow$}
       \RightLabel{$\lor E^{u,w}$}
       \TrinaryInfC{$C\downarrow$}
       \end{prooftree}
   + truth ::
     + the only verification of truth is the trivial one
       \begin{prooftree}
       \AxiomC{}
       \RightLabel{$\top I$}
       \UnaryInfC{$\top\uparrow$}
       \end{prooftree}
       hypothesis $\top\downarrow$ cannot be used because the is no elimination rule for $\top$
   + falsehood ::
     + there is no verification of falsehood because we have no introduction rule.
       \begin{prooftree}
       \AxiomC{$\perp\downarrow$}
       \RightLabel{$\perp E$}
       \UnaryInfC{$C\uparrow$}
       \end{prooftree}
   + Atomic propositions ::
     + _judgement rule_
       \begin{prooftree}
       \AxiomC{$P\downarrow$}
       \RightLabel{$\downarrow\uparrow$}
       \UnaryInfC{$P\uparrow$}
       \end{prooftree}
       represents a change in judgement
   + Global soundness ::
     + local soundness asserts that the elimination rules for it are not too strong
       given the introduction rules. Global soundness is its counterpart for the whole
       system of inference rules.
       If an arbitrary proposition _A_ has a verification then we may use _A_ without gaining
       any information. That is, for arbitrary propositions _A_ and _C_:
       \begin{tabular}{c}
       $A\downarrow$\\
       $\vdots$\\
       If $A\uparrow$ and $C\uparrow$ then $C\uparrow$\\
       \end{tabular}
   + Global completeness ::
     + Local completeness asserts that the elimination rules are not too weak.
       Global completeness is that if we may use _A_ then we can construct from this a
       verification of _A_. That is, for arbitrary propositions _A_:
       \begin{prooftree}
       \AxiomC{$A\downarrow$}
       \noLine
       \UnaryInfC{$\vdots$}
       \noLine
       \UnaryInfC{$A\uparrow$}
       \end{prooftree}
       Global completeness follows from local completeness rather directly by induction on
       the structure of _A_
       we allow
       \begin{prooftree}
       \AxiomC{$A\downarrow$}
       \RightLabel{$\uparrow\downarrow$}
       \UnaryInfC{$A\uparrow$}
       \end{prooftree}
** A counterexample
   If
   \begin{prooftree}
   \AxiomC{$A\supset B\downarrow\quad A\downarrow$}
   \RightLabel{$\supset E?$}
   \UnaryInfC{$B\downarrow$}
   \end{prooftree}
   Then the verification $((A\supset A)\supset B)\supset B\uparrow$ would be stuck
   \begin{prooftree}
   \AxiomC{}
   \RightLabel{$u$}
   \UnaryInfC{$(A\supset A)\supset B\downarrow$}
   \AxiomC{$A\supset A\downarrow$}
   \RightLabel{$\supset E?$}
   \BinaryInfC{$B\downarrow$}
   \RightLabel{$\uparrow\downarrow$}
   \UnaryInfC{$B\uparrow$}
   \RightLabel{$\supset I^u$}
   \UnaryInfC{$((A\supset A)\supset B)\supset B\uparrow$}
   \end{prooftree}
** Normal and neutral proof terms
   + any verification is a proof.
   + proof terms ::
     + $N:A\uparrow$ (N is a *verification* of _A_) N called *normal*
     + $R:A\downarrow$ (R is a *justification* for the use of _A_) R called *neutral*
   +
* Quantification
** Universal quantification
   + $\forall x:\tau. A(x)$ for all $x$ of type $\tau, A(x)$
   + introduction
     \begin{prooftree}
     \AxiomC{}
     \UnaryInfC{$a:\tau$}
     \noLine
     \UnaryInfC{$\vdots$}
     \noLine
     \UnaryInfC{$A(a)\; true$}
     \RightLabel{$\forall I^a$}
     \UnaryInfC{$\forall x:\tau. A(x) \;true$}
     \end{prooftree}
     _a_ is a *new* parameter.
   + verification
     \begin{prooftree}
     \AxiomC{$\forall x:\tau.A(x)\;true\quad t:\tau$}
     \RightLabel{$\forall E$}
     \UnaryInfC{$A(t)\; true$}
     \end{prooftree}
** Existential quantification
   + introduction
     \begin{prooftree}
     \AxiomC{$t:\tau\quad A(t)\; true$}
     \RightLabel{$\exists I$}
     \UnaryInfC{$\exists x:\tau.\; A(x)\; true$}
     \end{prooftree}
   + elimination
     \begin{prooftree}
     \AxiomC{$\exists x:\tau.\;A(x)\;true$}
     \AxiomC{}
     \UnaryInfC{$a:\tau$}
     \AxiomC{}
     \RightLabel{$u$}
     \UnaryInfC{$A(a)\; true$}
     \noLine
     \BinaryInfC{$\vdots$}
     \noLine
     \UnaryInfC{$C\; true$}
     \RightLabel{$\exists E^{a,u}$}
     \BinaryInfC{$C\; true$}
     \end{prooftree}
** Verification and uses
   + $A\uparrow$ has a verification
     $A\downarrow$ may be used
   + universal
     \begin{prooftree}
     \AxiomC{}
     \UnaryInfC{$a:\tau$}
     \noLine
     \UnaryInfC{$\vdots$}
     \noLine
     \UnaryInfC{$A(a)\uparrow$}
     \RightLabel{$\forall I^a$}
     \UnaryInfC{$\forall x:\tau.\;A(x)\uparrow$}
     \end{prooftree}

     \begin{prooftree}
     \AxiomC{$\forall x:\tau.\;A(x)\downarrow\;t:\tau$}
     \RightLabel{$\forall E$}
     \UnaryInfC{$A(t)\downarrow$}
     \end{prooftree}
   + existential
     \begin{prooftree}
     \AxiomC{$t:\tau\quad A(t)\uparrow$}
     \RightLabel{$\exists I$}
     \UnaryInfC{$\exists x:\tau.\; A(x)\uparrow$}
     \end{prooftree}

     \begin{prooftree}
     \AxiomC{$\exists x:\tau.\;A(x)\downarrow$}
     \AxiomC{}
     \UnaryInfC{$a:\tau$}
     \noLine
     \UnaryInfC{$\;$}
     \noLine
     \UnaryInfC{$\;$}
     \AxiomC{}
     \RightLabel{$u$}
     \UnaryInfC{$A(a)\downarrow$}
     \noLine
     \UnaryInfC{$\vdots$}
     \noLine
     \UnaryInfC{$C\uparrow$}
     \RightLabel{$\exists E^{a,u}$}
     \TrinaryInfC{$C\uparrow$}
     \end{prooftree}
** Proof terms
   + universal
     \begin{prooftree}
     \AxiomC{}
     \UnaryInfC{$a:\tau$}
     \noLine
     \UnaryInfC{$\vdots$}
     \noLine
     \UnaryInfC{$M:A(a)\uparrow$}
     \RightLabel{$\forall I^a$}
     \UnaryInfC{$(\textsf{fn} a\Rightarrow M)\forall x:\tau.\;A(x)\uparrow$}
     \end{prooftree}

     \begin{prooftree}
     \AxiomC{$M:\forall x:\tau.\;A(x)\downarrow\;t:\tau$}
     \RightLabel{$\forall E$}
     \UnaryInfC{$M\;t:A(t)\downarrow$}
     \end{prooftree}
   + existential
     \begin{prooftree}
     \AxiomC{$t:\tau\quad M:A(t)\uparrow$}
     \RightLabel{$\exists I$}
     \UnaryInfC{$(t,M):\exists x:\tau.\; A(x)\uparrow$}
     \end{prooftree}
   aofiewj


     \begin{prooftree}
     \AxiomC{$M:\exists x:\tau.\;A(x)\downarrow$}
     \AxiomC{}
     \UnaryInfC{$a:\tau$}
     \noLine
     \UnaryInfC{$\;$}
     \noLine
     \UnaryInfC{$\;$}
     \AxiomC{}
     \RightLabel{$u$}
     \UnaryInfC{$u:A(a)\downarrow$}
     \noLine
     \UnaryInfC{$\vdots$}
     \noLine
     \UnaryInfC{$N:C\uparrow$}
     \RightLabel{$\exists E^{a,u}$}
     \TrinaryInfC{$(\textsf{let}(a,u)=(t,Mc)\; \textsf{in}\; N):C\uparrow$}
     \end{prooftree}
* induction and recursion
** Example: Integer square root
   + $\forall x:\textsf{nat}. \exists y:\textsf{nat}. y^2=x$
     $\forall x:\textsf{nat}.\exists y:\textsf{nat}. y^2\le x\wedge x<(y+1)^2$
     proof by mathematical induction
** Example: Exponential
   + $\forall b:\textsf{nat}. \forall n:\textsf{nat}.\exists y = b^n$
   + base ::
     + n=0,pick y = 1
   + step ::
     + $\exists y:\textsf{nat}. y=b^n$. Show $\exists y:\textsf{nat}. y = b^{n+1}$
** Example: Warshall's algorithm for graph reachability
   + $\textsf{path}(x,y)$ when there is a path connecting x and y
     hence we can specify graph reachability as
     $\forall x:N. \forall y:N. \textsf{path}(x,y)\lor \neg\textsf{path}(x,y)$
   + Constructively, a proof will have to show whether given an x and y, there is a path
     connecting them or not.
   + Consider a fixed enumeration of the vertices in the graph and proceed by induction over
     the structure of this list
     Given some list V of vertices, we write $\textsf{path}_V(x,y)$ if there is a path
     connecting x and y using only vertices from V as interior nodes.
   + $\forall V:N \textsf{list}. \forall x:N. \forall y:N. \textsf{path}_V(x,y)\lor\neg
     \textsf{path}_V(x,y)$
** Example: Tail-recursive integer square root
   + $\forall x. \forall c. c^2\le x\supset\exists y.y^2 \le x\wedge x\le(y+1)^2$
     $\forall x.\forall d.\forall c.c^2\le x\wedge d=x-c^2\supset\exists y.y^2\le x\wedge x\le(y+1)^2$
* Heyting arithmetic
** induction
   + $\textsf{nat}$ is a _type_
   + w
     \begin{prooftree}
     \AxiomC{}
     \RightLabel{$\textsf{nat}I_0$}
     \UnaryInfC{$0:\textsf{nat}$}
     \end{prooftree}

     \begin{prooftree}
     \AxiomC{$n:\textsf{nat}$}
     \RightLabel{$\textsf{nat}I_s$}
     \UnaryInfC{$\textsf{s}n:\textsf{nat}$}
     \end{prooftree}
     the definition is not circular
     In (verificationist) constructive logic truth is defined by the introduction rules.
     Hence nothing else is a natural number.
     \begin{prooftree}
     \AxiomC{$n:\textsf{nat}$}
     \AxiomC{$C(\textsf{0})\;true$}
     \AxiomC{}
     \UnaryInfC{$x:\textsf{nat}$}
     \AxiomC{}
     \RightLabel{$u$}
     \UnaryInfC{$C(x)\;true$}
     \noLine
     \BinaryInfC{$\vdots$}
     \noLine
     \UnaryInfC{$C(\textsf{s}x)\;true$}
     \RightLabel{$\textsf{nat}E^{x,u}$}
     \TrinaryInfC{$C(n)\;true$}
     \end{prooftree}
     This corresponds exactly to proof by induction
   + $\forall n:\textsf{nat}.C(\textsf{0})\supset(\forall x:\textsf{nat}.C(x)\supset C(\textsf{s}x))\supset C(n)$
   + *All natural numbers are zero or successors*
     + *every natural number is either 0 or has a predecessor*
       $\forall x:\textsf{nat}.x=0\lor\exists y:\textsf{nat}.x=\textsf{s}y$
       x only have two cases.
       \begin{prooftree}
       \AxiomC{}
       \UnaryInfC{$x:\textsf{nat}$}
       \AxiomC{}
       \RightLabel{$\textsf{refl}$}
       \UnaryInfC{$\textsf{0 = 0}\;true$}
       \RightLabel{$\lor I_1$}
       \UnaryInfC{$\textsf{0 = 0}\;\lor\;\exists y:\textsf{nat}. \textsf{0 = s}y\;true$}
       \AxiomC{}
       \UnaryInfC{$x':\textsf{nat}$}
       \AxiomC{}
       \RightLabel{$\textsf{refl}$}
       \UnaryInfC{$\textsf{s}x'=\textsf{s}x'\;true$}
       \RightLabel{$\exists I$}
       \BinaryInfC{$\exists y:\textsf{nat. s}x'=\textsf{s}y\;true$}
       \RightLabel{$\lor I_2$}
       \UnaryInfC{$\textsf{s}x'=\textsf{0}\lor\exists y:\textsf{nat. s}x'=\textsf{s}y\;true$}
       \RightLabel{$\textsf{nat}E^{x',u}$}
       \TrinaryInfC{$x=\textsf{0}\lor\exists y:\textsf{nat}.x=\textsf{s}y\;true$}
       \RightLabel{$\forall I^x$}
       \UnaryInfC{$\forall x:\textsf{nat}.x=\textsf{0}\lor\exists y:\textsf{nat}.x=\textsf{s}y\;true$}
       \end{prooftree}
       $\textsf{refl}$ is reflexivity on natural numbers
       $C(x)=(x=\textsf{0}\lor\exists y:\textsf{nat}.x=\textsf{s}y)$
** Equality
   + introduction
     \begin{prooftree}
     \AxiomC{}
     \RightLabel{$=I_{00}$}
     \UnaryInfC{$\textsf{0 = 0}\;true$}
     \end{prooftree}

     \begin{prooftree}
     \AxiomC{$x=y\;true$}
     \RightLabel{$=I{ss}$}
     \UnaryInfC{$\textsf{s}x=\textsf{s}y\;true$}
     \end{prooftree}
   + elimination
     no rule for $E_{00}$

     \begin{prooftree}
     \AxiomC{$0=\textsf{s}x\;true$}
     \RightLabel{$=E_{0s}$}
     \UnaryInfC{$C\;true$}
     \end{prooftree}

     \begin{prooftree}
     \AxiomC{$\textsf{s}x=0\;true$}
     \RightLabel{$=E_{s0}$}
     \UnaryInfC{$C\;true$}
     \end{prooftree}

     \begin{prooftree}
     \AxiomC{$\textsf{s}x=\textsf{s}y\;true$}
     \RightLabel{$=E_{ss}$}
     \UnaryInfC{$x=y\;true$}
     \end{prooftree}
** Equality is reflexive
   + $\forall x:\textsf{nat}.x=x$
   + base
     0=0 by $I_{00}$
   + step
     Assume x = x
     \begin{prooftree}
     \AxiomC{}
     \UnaryInfC{$n:\textsf{nat}$}
     \AxiomC{}
     \RightLabel{$=I_{00}$}
     \UnaryInfC{$0=0\;true$}
     \AxiomC{}
     \RightLabel{$u$}
     \UnaryInfC{$x=x\;true$}
     \RightLabel{$=I_{ss}$}
     \UnaryInfC{$\textsf{s}x=\textsf{s}x\;true$}
     \RightLabel{$\textsf{nat}E^{x,u}$}
     \TrinaryInfC{$n=n\;true$}
     \RightLabel{$\forall I^n$}
     \UnaryInfC{$\forall x:\textsf{nat}.x=x\;true$}
     \end{prooftree}
   + Hence
     \begin{prooftree}
     \AxiomC{$x:\textsf{nat}$}
     \RightLabel{$\textsf{refl}$}
     \UnaryInfC{$x=x\;true$}
     \end{prooftree}
** Primitive recursion
   + *rule of primitive recursion* for _nat_
     \begin{prooftree}
     \AxiomC{$n:\textsf{nat}$}
     \AxiomC{$t_0:\tau$}
     \AxiomC{}
     \UnaryInfC{$x:\textsf{nat}$}
     \AxiomC{}
     \UnaryInfC{$r:\tau$}
     \noLine
     \BinaryInfC{$\vdots$}
     \noLine
     \UnaryInfC{$t_s:\tau$}
     \RightLabel{$\textsf{nat}E^{x,r}$}
     \TrinaryInfC{$R(n,t_0,x.r.t_s):\tau$}
     \end{prooftree}
     R is a new term constructor
     t₀ is the zero case
     tₛ captures the successor case where n=sn'. x is a new parameter introduced
     that stands for n'
     r stands for the result of the function R applied to n'
     x.r.tₛ indicates that occurrences of x and r in tₛ are bound with scope tₛ
     \begin{tabular}{l c l}
     $R(\textsf{0},t_0,x.r.t_s)$&$\Rightarrow_R$&$t_0$\\
     $R(\textsf{s}n',t_0,x.r.t_s)$&$\Rightarrow_R$&$[R(n',t_0,x.r.t_s)/r][n'/x]t_s$\\
     \end{tabular}
     x=>n',r=>R(n')
   + *schema of primitive recursion*
     \begin{tabular}{l c l}
     $f(0)$&=&$t_0$\\
     $f(s\;x)$&=&$t_s(x,f(x))\\
     \end{tabular}
     hence
     $f=\textsf{fn}\;n\Rightarrow R(n,t_0,x.r.t_s(x,r))$
     since
     \begin{tabular}{l c l}
     $f(\textsf{s}\;n)$&$\Rightarrow_R$&$R(\textsf{s}n,t_0,x.r.t_s(x,r))$\\
     &$\Rightarrow_R$&$t_s(n,R(n,t_0,x.r.t_s(x,r)))$\\
     &=&$t_s(n,f(n))$
     \end{tabular}
   + w
     \begin{prooftree}
     \AxiomC{}
     \UnaryInfC{$x:\tau$}
     \noLine
     \UnaryInfC{$\vdots$}
     \noLine
     \UnaryInfC{$s:\sigma$}
     \RightLabel{$\to I$}
     \UnaryInfC{$\lambda x:\tau.s:\tau\to\sigma$}
     \end{prooftree}

     \begin{prooftree}
     \AxiomC{$s:\tau\to\sigma\;t:\tau$}
     \RightLabel{$\to E$}
     \UnaryInfC{$st:\tau$}
     \end{prooftree}
     local reduction
     $(\lambda x:\tau.s)t\Rightarrow_R[t/x]s$
   + Hence
     \begin{tabular}{l c l}
     $\textsf{double}(0)$&=&$0$\\
     $\textsf{double}(\textsf{s}x)$&=&$\textsf{s}(\textsf{s}(\textsf{double} x))$\\
     $\textsf{double}$&=&$\lambda n.R(n,\textsf{0},x.r.\textsf{s}(\textsf{s} r))$
     \end{tabular}
     \begin{tabular}{l c l}
     $\textsf{plus}(\textsf{0})$&=&$\lambda y.y$\\
     $\textsf{plus}(\textsf{s} x)$&=&$\lambda y.\textsf{s}((\textsf{plus } x)y)
     \end{tabular}
     $\textsf{nat}\to(\textsf{nat}\to\textsf{nat})$
** Proof terms
   + w
     \begin{prooftree}
     \AxiomC{$n:\textsf{nat}$}
     \AxiomC{$M_0:C(\textsf{0})$}
     \AxiomC{}
     \UnaryInfC{$x:\textsf{nat}$}
     \AxiomC{}
     \RightLabel{$u$}
     \UnaryInfC{$u:C(x)$}
     \noLine
     \BinaryInfC{$\vdots$}
     \noLine
     \UnaryInfC{$M_s:C(\textsf{s}x)$}
     \RightLabel{$\textsf{nat}E^{x,u}$}
     \TrinaryInfC{$R(n,M_0,x.u.M_s):C(n)$}
     \end{prooftree}
     \begin{tabular}{l c l}
     $R(\textsf{0},M_0,x.u.M_s)$&$\Rightarrow_R$&$M_0$\\
     $R(\textsf{s}n',M_0,x.u.M_s)$&$\Rightarrow_R$&$[R(n',M_0,x.u.M_s)/u][n'/x]M_s$
     \end{tabular}
   + Theorem :: $\forall x:\textsf{nat}.x=0\lor\exists y:\textsf{nat}.x=\textsf{nat}y$
     + case x = 0. left disjunct is true
     + case x = sx'. Then right disjunct is true.
     + $\textsf{pred}=\lambda x:\textsf{nat}. R(x,\textsf{inl}\_,x.r.\textsf{inr}\langle x,\_\rangle)$
